# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python check and publish

on:
  pull_request:
  push:
    branches:
      - master

jobs:
  check:
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools
        python setup.py develop
    - name: flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 smart_arg.py
    - name: mypy
      run: |
        pip install types-pkg_resources
        [ ${{ matrix.python-version }} == 3.6 ] && pip install dataclasses types-dataclasses
        pip install mypy
        mypy
    - name: Test with pytest
      run: |
        pip install pytest
        pytest

  publish:
    runs-on: ubuntu-latest
    needs: check
    if: >
      github.ref == 'refs/heads/master' && github.event_name == 'push' && github.repository_owner == 'linkedin'
      && !contains(github.event.head_commit.message, 'NO_PUBLISH')

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'  # To fetch tags too
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools twine
          python setup.py develop
      - name: Build, publish and tag
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.pypi_token }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          bash publish.sh $(python -c "import smart_arg; print(smart_arg._base_version)")
